
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEASSIGNMENT CLOSEBRACE COLON COMMA COMMENT DECI DEN DIVIDE DOUBLE_GREATER DOUBLE_LESS EF EFNOT EQUAL GREATER_EQUAL GREATER_THAN IDENTIFIER IN LESS_EQUAL LESS_THAN LETTA MINUS MODULUS NOT_EQUAL NUMBA OPENBRACE OREF PLUS SHOW TIMES WEN WUDprogram : statementstatement : expression\n                 | if_statement\n                 | loop\n                 | assign\n                 | print\n                 | COMMENT statement : statement COMMA statement arith_stmt : expression arithm_symbol expression\n                  | expression error term expression : symbol expression : compar_stmt\n                   | arith_stmt symbol : arithm_symbol \n               | compar_symbol arithm_symbol : PLUS\n                      | MINUS\n                      | DIVIDE\n                      | TIMES\n                      | MODULUS  compar_symbol : GREATER_THAN\n                      | LESS_THAN\n                      | EQUAL\n                      | NOT_EQUAL\n                      | GREATER_EQUAL\n                      | LESS_EQUAL arith_stmt : IDENTIFIER arithm_symbol term\n                  | IDENTIFIER error term\n    compar_stmt : factor compar_symbol factor\n                | factor error factor\n    compar_stmt : IDENTIFIER compar_symbol IDENTIFIER\n                | IDENTIFIER compar_symbol factor\n                | IDENTIFIER error factor\n                | IDENTIFIER error IDENTIFIERexpression : termterm : factorarith_symbol : factor arithm_symbol factor \n    factor : NUMBA\n            | DECI\n    term : IDENTIFIERfactor : OPENBRACE expression CLOSEBRACE\n    if_statement : DOUBLE_LESS EF OPENBRACE compar_stmt CLOSEBRACE DEN statement DOUBLE_GREATER\n                 | DOUBLE_LESS EF OPENBRACE compar_stmt CLOSEBRACE DEN statement EFNOT statement DOUBLE_GREATER\n                 | DOUBLE_LESS EF OPENBRACE compar_stmt CLOSEBRACE DEN statement OREF OPENBRACE compar_stmt CLOSEBRACE DEN statement EFNOT statement DOUBLE_GREATER\n                 | DOUBLE_LESS EF OPENBRACE error CLOSEBRACE DEN statement DOUBLE_GREATER\n    loop : DOUBLE_LESS WEN IDENTIFIER IN expression COLON statement DOUBLE_GREATER\n            | DOUBLE_LESS WEN IDENTIFIER IN expression COMMA expression COLON statement DOUBLE_GREATER\n    assign : IDENTIFIER ASSIGNMENT expression\n           | IDENTIFIER ASSIGNMENT WUD\n           | IDENTIFIER ASSIGNMENT LETTA\n    \n    print : SHOW OPENBRACE IDENTIFIER CLOSEBRACE\n    \n    print : SHOW OPENBRACE factor CLOSEBRACE\n          | SHOW OPENBRACE WUD CLOSEBRACE\n          | SHOW OPENBRACE LETTA CLOSEBRACE\n          | SHOW OPENBRACE error CLOSEBRACE\n    '
    
_lr_action_items = {'COMMENT':([0,33,85,86,89,96,100,108,110,],[8,8,8,8,8,8,8,8,8,]),'DOUBLE_LESS':([0,33,85,86,89,96,100,108,110,],[13,13,13,13,13,13,13,13,13,]),'IDENTIFIER':([0,14,20,21,22,23,24,25,26,27,28,29,30,33,34,35,37,40,41,42,43,44,52,75,83,85,86,89,90,96,100,102,108,110,],[15,39,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,15,39,51,53,39,58,60,51,64,74,39,87,15,15,15,39,15,15,74,15,15,]),'SHOW':([0,33,85,86,89,96,100,108,110,],[16,16,16,16,16,16,16,16,16,]),'PLUS':([0,3,9,10,11,12,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,48,49,50,51,54,55,58,59,60,61,62,63,69,70,75,84,85,86,89,90,94,96,100,108,110,],[20,20,-11,-12,-13,-35,20,20,-36,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,20,20,20,20,20,20,-10,-36,-40,-41,20,-31,-32,-34,-33,-28,-27,-29,-30,20,20,20,20,20,20,20,20,20,20,20,]),'MINUS':([0,3,9,10,11,12,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,48,49,50,51,54,55,58,59,60,61,62,63,69,70,75,84,85,86,89,90,94,96,100,108,110,],[21,21,-11,-12,-13,-35,21,21,-36,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,21,21,21,21,21,21,-10,-36,-40,-41,21,-31,-32,-34,-33,-28,-27,-29,-30,21,21,21,21,21,21,21,21,21,21,21,]),'DIVIDE':([0,3,9,10,11,12,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,48,49,50,51,54,55,58,59,60,61,62,63,69,70,75,84,85,86,89,90,94,96,100,108,110,],[22,22,-11,-12,-13,-35,22,22,-36,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,22,22,22,22,22,22,-10,-36,-40,-41,22,-31,-32,-34,-33,-28,-27,-29,-30,22,22,22,22,22,22,22,22,22,22,22,]),'TIMES':([0,3,9,10,11,12,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,48,49,50,51,54,55,58,59,60,61,62,63,69,70,75,84,85,86,89,90,94,96,100,108,110,],[23,23,-11,-12,-13,-35,23,23,-36,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,23,23,23,23,23,23,-10,-36,-40,-41,23,-31,-32,-34,-33,-28,-27,-29,-30,23,23,23,23,23,23,23,23,23,23,23,]),'MODULUS':([0,3,9,10,11,12,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,48,49,50,51,54,55,58,59,60,61,62,63,69,70,75,84,85,86,89,90,94,96,100,108,110,],[24,24,-11,-12,-13,-35,24,24,-36,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,24,24,24,24,24,24,-10,-36,-40,-41,24,-31,-32,-34,-33,-28,-27,-29,-30,24,24,24,24,24,24,24,24,24,24,24,]),'GREATER_THAN':([0,14,15,17,20,21,22,23,24,31,32,33,34,39,40,54,73,74,75,85,86,89,90,96,100,108,110,],[25,25,25,25,-16,-17,-18,-19,-20,-38,-39,25,25,25,25,-41,25,25,25,25,25,25,25,25,25,25,25,]),'LESS_THAN':([0,14,15,17,20,21,22,23,24,31,32,33,34,39,40,54,73,74,75,85,86,89,90,96,100,108,110,],[26,26,26,26,-16,-17,-18,-19,-20,-38,-39,26,26,26,26,-41,26,26,26,26,26,26,26,26,26,26,26,]),'EQUAL':([0,14,15,17,20,21,22,23,24,31,32,33,34,39,40,54,73,74,75,85,86,89,90,96,100,108,110,],[27,27,27,27,-16,-17,-18,-19,-20,-38,-39,27,27,27,27,-41,27,27,27,27,27,27,27,27,27,27,27,]),'NOT_EQUAL':([0,14,15,17,20,21,22,23,24,31,32,33,34,39,40,54,73,74,75,85,86,89,90,96,100,108,110,],[28,28,28,28,-16,-17,-18,-19,-20,-38,-39,28,28,28,28,-41,28,28,28,28,28,28,28,28,28,28,28,]),'GREATER_EQUAL':([0,14,15,17,20,21,22,23,24,31,32,33,34,39,40,54,73,74,75,85,86,89,90,96,100,108,110,],[29,29,29,29,-16,-17,-18,-19,-20,-38,-39,29,29,29,29,-41,29,29,29,29,29,29,29,29,29,29,29,]),'LESS_EQUAL':([0,14,15,17,20,21,22,23,24,31,32,33,34,39,40,54,73,74,75,85,86,89,90,96,100,108,110,],[30,30,30,30,-16,-17,-18,-19,-20,-38,-39,30,30,30,30,-41,30,30,30,30,30,30,30,30,30,30,30,]),'NUMBA':([0,14,20,21,22,23,24,25,26,27,28,29,30,33,34,35,40,41,42,43,44,45,46,52,75,83,85,86,89,90,96,100,102,108,110,],[31,31,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'DECI':([0,14,20,21,22,23,24,25,26,27,28,29,30,33,34,35,40,41,42,43,44,45,46,52,75,83,85,86,89,90,96,100,102,108,110,],[32,32,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'OPENBRACE':([0,14,16,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,40,41,42,43,44,45,46,52,75,83,85,86,89,90,96,97,100,102,108,110,],[14,14,44,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,14,14,14,52,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,102,14,14,14,14,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,39,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,69,70,76,77,78,79,80,95,98,99,104,106,112,],[0,-1,-2,-3,-4,-5,-6,-7,-11,-12,-13,-35,-40,-36,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,-40,-8,-9,-10,-36,-40,-41,-48,-49,-50,-31,-32,-34,-33,-28,-27,-29,-30,-51,-52,-53,-54,-55,-42,-45,-46,-43,-47,-44,]),'COMMA':([2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,39,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,69,70,76,77,78,79,80,84,91,92,93,95,98,99,101,103,104,106,109,111,112,],[33,-2,-3,-4,-5,-6,-7,-11,-12,-13,-35,-40,-36,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,-40,33,-9,-10,-36,-40,-41,-48,-49,-50,-31,-32,-34,-33,-28,-27,-29,-30,-51,-52,-53,-54,-55,90,33,33,33,-42,-45,-46,33,33,-43,-47,33,33,-44,]),'DOUBLE_GREATER':([3,4,5,6,7,8,9,10,11,12,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,39,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,69,70,76,77,78,79,80,91,92,93,95,98,99,101,103,104,106,111,112,],[-2,-3,-4,-5,-6,-7,-11,-12,-13,-35,-40,-36,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,-40,-8,-9,-10,-36,-40,-41,-48,-49,-50,-31,-32,-34,-33,-28,-27,-29,-30,-51,-52,-53,-54,-55,95,98,99,-42,-45,-46,104,106,-43,-47,112,-44,]),'EFNOT':([3,4,5,6,7,8,9,10,11,12,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,39,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,69,70,76,77,78,79,80,91,95,98,99,104,106,109,112,],[-2,-3,-4,-5,-6,-7,-11,-12,-13,-35,-40,-36,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,-40,-8,-9,-10,-36,-40,-41,-48,-49,-50,-31,-32,-34,-33,-28,-27,-29,-30,-51,-52,-53,-54,-55,96,-42,-45,-46,-43,-47,110,-44,]),'OREF':([3,4,5,6,7,8,9,10,11,12,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,39,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,69,70,76,77,78,79,80,91,95,98,99,104,106,112,],[-2,-3,-4,-5,-6,-7,-11,-12,-13,-35,-40,-36,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,-40,-8,-9,-10,-36,-40,-41,-48,-49,-50,-31,-32,-34,-33,-28,-27,-29,-30,-51,-52,-53,-54,-55,97,-42,-45,-46,-43,-47,-44,]),'error':([3,9,10,11,12,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,38,39,44,48,49,50,51,52,54,55,58,59,60,61,62,63,69,70,73,74,84,94,],[35,-11,-12,-13,-35,42,46,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,35,42,68,35,-10,-36,-40,72,-41,35,-31,-32,-34,-33,-28,-27,-29,-30,46,83,35,35,]),'CLOSEBRACE':([9,10,11,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,38,39,48,49,50,51,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,87,88,105,],[-11,-12,-13,-35,-36,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,54,-40,-9,-10,-36,-40,-41,-31,-32,-34,-33,-28,-27,76,77,78,79,80,-29,-30,81,82,-34,-33,107,]),'COLON':([9,10,11,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,39,48,49,50,51,54,58,59,60,61,62,63,69,70,84,94,],[-11,-12,-13,-35,-36,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-38,-39,-40,-9,-10,-36,-40,-41,-31,-32,-34,-33,-28,-27,-29,-30,89,100,]),'EF':([13,],[36,]),'WEN':([13,],[37,]),'ASSIGNMENT':([15,],[40,]),'WUD':([40,44,],[56,66,]),'LETTA':([40,44,],[57,67,]),'IN':([53,],[75,]),'DEN':([81,82,107,],[85,86,108,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,33,85,86,89,96,100,108,110,],[2,47,91,92,93,101,103,109,111,]),'expression':([0,14,33,34,40,75,85,86,89,90,96,100,108,110,],[3,38,3,48,55,84,3,3,3,94,3,3,3,3,]),'if_statement':([0,33,85,86,89,96,100,108,110,],[4,4,4,4,4,4,4,4,4,]),'loop':([0,33,85,86,89,96,100,108,110,],[5,5,5,5,5,5,5,5,5,]),'assign':([0,33,85,86,89,96,100,108,110,],[6,6,6,6,6,6,6,6,6,]),'print':([0,33,85,86,89,96,100,108,110,],[7,7,7,7,7,7,7,7,7,]),'symbol':([0,14,33,34,40,75,85,86,89,90,96,100,108,110,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'compar_stmt':([0,14,33,34,40,52,75,85,86,89,90,96,100,102,108,110,],[10,10,10,10,10,71,10,10,10,10,10,10,10,105,10,10,]),'arith_stmt':([0,14,33,34,40,75,85,86,89,90,96,100,108,110,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'term':([0,14,33,34,35,40,42,43,75,85,86,89,90,96,100,108,110,],[12,12,12,12,49,12,62,63,12,12,12,12,12,12,12,12,12,]),'factor':([0,14,33,34,35,40,41,42,43,44,45,46,52,75,83,85,86,89,90,96,100,102,108,110,],[17,17,17,17,50,17,59,61,50,65,69,70,73,17,88,17,17,17,17,17,17,73,17,17,]),'arithm_symbol':([0,3,14,15,33,34,38,39,40,48,55,75,84,85,86,89,90,94,96,100,108,110,],[18,34,18,43,18,18,34,43,18,34,34,18,34,18,18,18,18,34,18,18,18,18,]),'compar_symbol':([0,14,15,17,33,34,39,40,73,74,75,85,86,89,90,96,100,108,110,],[19,19,41,45,19,19,41,19,45,41,19,19,19,19,19,19,19,19,19,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','jolt_yacc.py',26),
  ('statement -> expression','statement',1,'p_statement','jolt_yacc.py',32),
  ('statement -> if_statement','statement',1,'p_statement','jolt_yacc.py',33),
  ('statement -> loop','statement',1,'p_statement','jolt_yacc.py',34),
  ('statement -> assign','statement',1,'p_statement','jolt_yacc.py',35),
  ('statement -> print','statement',1,'p_statement','jolt_yacc.py',36),
  ('statement -> COMMENT','statement',1,'p_statement','jolt_yacc.py',37),
  ('statement -> statement COMMA statement','statement',3,'p_stmt2','jolt_yacc.py',42),
  ('arith_stmt -> expression arithm_symbol expression','arith_stmt',3,'p_expression_plus','jolt_yacc.py',50),
  ('arith_stmt -> expression error term','arith_stmt',3,'p_expression_plus','jolt_yacc.py',51),
  ('expression -> symbol','expression',1,'p_expression_symbol','jolt_yacc.py',77),
  ('expression -> compar_stmt','expression',1,'p_expression_stmt_types','jolt_yacc.py',82),
  ('expression -> arith_stmt','expression',1,'p_expression_stmt_types','jolt_yacc.py',83),
  ('symbol -> arithm_symbol','symbol',1,'p_expr_symbols','jolt_yacc.py',87),
  ('symbol -> compar_symbol','symbol',1,'p_expr_symbols','jolt_yacc.py',88),
  ('arithm_symbol -> PLUS','arithm_symbol',1,'p_symbol_arithm','jolt_yacc.py',94),
  ('arithm_symbol -> MINUS','arithm_symbol',1,'p_symbol_arithm','jolt_yacc.py',95),
  ('arithm_symbol -> DIVIDE','arithm_symbol',1,'p_symbol_arithm','jolt_yacc.py',96),
  ('arithm_symbol -> TIMES','arithm_symbol',1,'p_symbol_arithm','jolt_yacc.py',97),
  ('arithm_symbol -> MODULUS','arithm_symbol',1,'p_symbol_arithm','jolt_yacc.py',98),
  ('compar_symbol -> GREATER_THAN','compar_symbol',1,'p_symbol_comparison','jolt_yacc.py',103),
  ('compar_symbol -> LESS_THAN','compar_symbol',1,'p_symbol_comparison','jolt_yacc.py',104),
  ('compar_symbol -> EQUAL','compar_symbol',1,'p_symbol_comparison','jolt_yacc.py',105),
  ('compar_symbol -> NOT_EQUAL','compar_symbol',1,'p_symbol_comparison','jolt_yacc.py',106),
  ('compar_symbol -> GREATER_EQUAL','compar_symbol',1,'p_symbol_comparison','jolt_yacc.py',107),
  ('compar_symbol -> LESS_EQUAL','compar_symbol',1,'p_symbol_comparison','jolt_yacc.py',108),
  ('arith_stmt -> IDENTIFIER arithm_symbol term','arith_stmt',3,'p_expression_withidentifier','jolt_yacc.py',113),
  ('arith_stmt -> IDENTIFIER error term','arith_stmt',3,'p_expression_withidentifier','jolt_yacc.py',114),
  ('compar_stmt -> factor compar_symbol factor','compar_stmt',3,'p_expression_comparison','jolt_yacc.py',145),
  ('compar_stmt -> factor error factor','compar_stmt',3,'p_expression_comparison','jolt_yacc.py',146),
  ('compar_stmt -> IDENTIFIER compar_symbol IDENTIFIER','compar_stmt',3,'p_expression_comparison2','jolt_yacc.py',164),
  ('compar_stmt -> IDENTIFIER compar_symbol factor','compar_stmt',3,'p_expression_comparison2','jolt_yacc.py',165),
  ('compar_stmt -> IDENTIFIER error factor','compar_stmt',3,'p_expression_comparison2','jolt_yacc.py',166),
  ('compar_stmt -> IDENTIFIER error IDENTIFIER','compar_stmt',3,'p_expression_comparison2','jolt_yacc.py',167),
  ('expression -> term','expression',1,'p_expression_term','jolt_yacc.py',207),
  ('term -> factor','term',1,'p_term_factor','jolt_yacc.py',211),
  ('arith_symbol -> factor arithm_symbol factor','arith_symbol',3,'p_term_times_div_factors','jolt_yacc.py',215),
  ('factor -> NUMBA','factor',1,'p_factor_digit','jolt_yacc.py',228),
  ('factor -> DECI','factor',1,'p_factor_digit','jolt_yacc.py',229),
  ('term -> IDENTIFIER','term',1,'p_term_factor_iden','jolt_yacc.py',234),
  ('factor -> OPENBRACE expression CLOSEBRACE','factor',3,'p_factor_expr','jolt_yacc.py',241),
  ('if_statement -> DOUBLE_LESS EF OPENBRACE compar_stmt CLOSEBRACE DEN statement DOUBLE_GREATER','if_statement',8,'p_if_statement','jolt_yacc.py',246),
  ('if_statement -> DOUBLE_LESS EF OPENBRACE compar_stmt CLOSEBRACE DEN statement EFNOT statement DOUBLE_GREATER','if_statement',10,'p_if_statement','jolt_yacc.py',247),
  ('if_statement -> DOUBLE_LESS EF OPENBRACE compar_stmt CLOSEBRACE DEN statement OREF OPENBRACE compar_stmt CLOSEBRACE DEN statement EFNOT statement DOUBLE_GREATER','if_statement',16,'p_if_statement','jolt_yacc.py',248),
  ('if_statement -> DOUBLE_LESS EF OPENBRACE error CLOSEBRACE DEN statement DOUBLE_GREATER','if_statement',8,'p_if_statement','jolt_yacc.py',249),
  ('loop -> DOUBLE_LESS WEN IDENTIFIER IN expression COLON statement DOUBLE_GREATER','loop',8,'p_statement_forloop','jolt_yacc.py',283),
  ('loop -> DOUBLE_LESS WEN IDENTIFIER IN expression COMMA expression COLON statement DOUBLE_GREATER','loop',10,'p_statement_forloop','jolt_yacc.py',284),
  ('assign -> IDENTIFIER ASSIGNMENT expression','assign',3,'p_assign','jolt_yacc.py',301),
  ('assign -> IDENTIFIER ASSIGNMENT WUD','assign',3,'p_assign','jolt_yacc.py',302),
  ('assign -> IDENTIFIER ASSIGNMENT LETTA','assign',3,'p_assign','jolt_yacc.py',303),
  ('print -> SHOW OPENBRACE IDENTIFIER CLOSEBRACE','print',4,'p_print_show','jolt_yacc.py',310),
  ('print -> SHOW OPENBRACE factor CLOSEBRACE','print',4,'p_print_show2','jolt_yacc.py',320),
  ('print -> SHOW OPENBRACE WUD CLOSEBRACE','print',4,'p_print_show2','jolt_yacc.py',321),
  ('print -> SHOW OPENBRACE LETTA CLOSEBRACE','print',4,'p_print_show2','jolt_yacc.py',322),
  ('print -> SHOW OPENBRACE error CLOSEBRACE','print',4,'p_print_show2','jolt_yacc.py',323),
]
